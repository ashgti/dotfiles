#!/usr/bin/env bash

: ${HOME=~}
: ${LOGNAME=$(id -un)}
: ${UNAME=$(uname)}

: ${HOSTFILE=~/.ssh/known_hosts}
: ${INPUTRC=~/.inputrc}

#---------------------------
# Shell Options
#---------------------------

# System bashrc
test -r /etc/bashrc && . /etc/bashrc

# Aliases
source ~/.bash_aliases

# Notify immedetely
set -o notify

# Shell options
shopt -s cdspell                    # Check cd spelling
shopt -s extglob                    # Extended pattern matching
shopt -s histappend                 # Append history on exit
shopt -s hostcomplete               # Attempt to complete '@'
shopt -s interactive_comments       # Allow comments in interactive
shopt -s no_empty_cmd_completion    # Don't complete on an empty line.
shopt -s cdable_vars


#----------------------
# PATH
#----------------------

# test -d "$HOME/devel/bin" && PATH="$HOME/devel/bin:$PATH"

#----------------------
# Environment Config
#----------------------

case "$-" in
    *i*) INTERACTIVE=yes ;;
    *) unset INTERACTIVE ;;
esac

case "$0" in
    -*) LOGIN=yes ;;
    *) unset LOGIN ;;
esac

# Enable UTF locale
: ${LANG:="en_US.UTF-8"}
: ${LANGUAGE:="en"}
: ${LC_CTYPE:="en_US.UTF-8"}
: ${LC_ALL:="en_US.UTF-8"}
export LANG LANGUAGE LC_CTYPE LC_ALL

# Always use passive FTP
: ${FTP_PASSIVE:=1}
export FTP_PASSIVE

# Some filetypes to ignore
FIGNORE="~:CVS:#:.pyc:.swp:.swa"

#HISTORY
export HISTCONTROL="erasedups:ignoreboth"                 # Ignore space and duplicates 
export HISTSIZE=10000
export HISTFILESIZE=10000
export HISTTIMEFORMAT="[%D %T]"
export HISTIGNORE="fg*:bg*:history*"
shopt -s cmdhist                                # Save multiline in one line
shopt -s histreedit                             # Reedit failed substitution

#--------------------
# Pager and editor
#--------------------

HAVE_VIM=$(command -v vim)
HAVE_GVIM=$(command -v gvim)
HAVE_NANO=$(command -v nano)
HAVE_MATE=$(command -v mate)

# test -n "$HAVE_VIM" && EDITOR=vim || EDITOR=vi
# test -n "$HAVE_VIM" && EDITOR=nano || EDITOR=vi
# test -n "$HAVE_MATE" && EDITOR=mate || EDITOR=nano
EDITOR=vim
export EDITOR

# alias r='fc -s'

# PAGER
if test -n "$(command -v less)" ; then
    PAGER="less -FirSwX"
    MANPAGER="less -FiRswX"
else
    PAGER=more
    MANPAGER="$PAGER"
fi
export PAGER MANPAGER

# Ack
ACK_PAGER="$PAGER"
ACK_PAGER_COLOR="$PAGER"

export CLICOLOR="yes"

#-------------------
# LS
#-------------------

LS_COMMON="-hBG"

dircolors="$(type -P gdircolors dircolors | head -1)"
test -n "$dircolors" && {
    COLORS=/etc/DIR_COLORS
    test -e "/etc/DIR_COLORS.$TERM"         && COLORS="/etc/DIR_COLORS.$TERM"
    test -e "$HOME/.dircolors"              && COLORS="$HOME/.dircolors"
    test ! -e "$COLORS"                     && COLORS=
    eval `$dircolors --sh $COLORS`
}
unset dircolors

test -n "$LS_COMMON" &&
    alias ls="command ls $LS_COMMON"

alias ll="ls -l"
alias la="ls -a"
alias l.="ls -d .*"
alias dir="ls"



#----------------------
# Prompt 
#----------------------

source $HOME/.bashscripts/ps1_functions.sh

#ps1_set --prompt ∫ --notime --noseparator
ps1_set --prompt ∫ --notime 'S\:\ '

#----------------------
# Useful functions
#----------------------

push_ssh_cert() {
    local _host
    test -f ~/.ssh/id_dsa.pub || ssh-keygen -t dsa
    for _host in "$@";
    do
        echo $_host
        ssh $_host 'touch ~/.ssh/authorized_keys'
        ssh $_host 'cat >> ~/.ssh/authorized_keys' < ~/.ssh/id_dsa.pub
    done
}

extract () 
{
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xvjf $1        ;;
            *.tar.gz)    tar xvzf $1     ;;
            *.bz2)       bunzip2 $1       ;;
            *.rar)       unrar x $1     ;;
            *.gz)        gunzip $1     ;;
            *.tar)       tar xvf $1        ;;
            *.tbz2)      tar xvjf $1      ;;
            *.tgz)       tar xvzf $1       ;;
            *.zip)       unzip $1     ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1    ;;
            *)           echo "'$1' cannot be extracted via >extract<" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

function ii()   # Get current host related info.
{
    echo -e "\nYou are logged on ${RED}$HOST"
    echo -e "\nAdditionnal information:$NC " ; uname -a
    echo -e "\n${RED}Users logged on:$NC " ; w -h
    echo -e "\n${RED}Current date :$NC " ; date
    echo -e "\n${RED}Machine stats :$NC " ; uptime
}

# -------------------------
# Bash Completion 
# -------------------------
test -z "$BASH_COMPLETION" && {
    bash=${BASH_VERSION%.*}; bmajor=${bash%.*}; bminor=${bash#*.}
    test -n "$PS1" && test $bmajor -gt 1 && {
        # search for a bash_completion file to source
        for f in /usr/local/etc/bash_completion \
            /usr/pkg/etc/bash_completion \
            /opt/local/etc/bash_completion \
            /etc/bash_completion \
            ~/.bash_completion
        do
            test -f $f && {
                . $f
                break
            }
        done
    }
    unset bash bmajor bminor f
}

_expand() {
    return 0
}

if [ -x $(which -s brew) ]; then
    source `brew --prefix`/Library/Contributions/brew_bash_completion.sh
fi

if [ -d $HOME/.cabal/bin ]; then
    export PATH=$PATH:$HOME/.cabal/bin
fi

#--------------------------
# Mac Specific
#--------------------------

#-------------------------
# Closing Notes/User Specific
# -------------------------

# # Python interactive shell stuff
# PYTHONSTARTUP=~/.pythonrc.py
# export PYTHONSTARTUP

# ROS Stuff
test -r $HOME/.rosrc && . $HOME/.rosrc

# MORSE Stuff
test -r $HOME/.morserc && . $HOME/.morserc

# Tell me something nifty at login
test -n "$INTERACTIVE" -a -n "$LOGIN" && {
    uname -npsr
    uptime 2> /dev/null
}
# export PATH="/usr/local/share/python:/usr/local/bin:$PATH"
export PATH="/usr/local/bin:$PATH:$HOME/Projects/local/bin:/Applications/Arduino.app/Contents/Resources/Java/hardware/tools/avr/bin"
export PKG_CONFIG_PATH="/usr/local/lib/pkgconfig/:/usr/local/share/pkgconfig:$PKG_CONFIG_PATH"
export PYTHONPATH="/usr/local/lib/python:/usr/local/lib/python2.7/site-packages:/usr/local/lib/python2.7/site_packages:$PYTHONPATH"
# export PYTHONPATH="/Library/Python/2.7:/usr/local/lib/python:$PYTHONPATH"
# test -r $HOME/Projects/ros-eletric/setup.bash && source $HOME/Projects/ros-eletric/setup.bash
export CPLUS_INCLUDE_PATH="/usr/local/include:$CPLUS_INCLUDE_PATH"

export NODE_PATH="/usr/local/lib/node"

if [ -f $HOME/perl5/perlbrew/etc/bashrc ]; then
    . ~/perl5/perlbrew/etc/bashrc
fi

export PERL5LIB=$HOME/Projects/local/lib/perl
export ROS_OS_OVERRIDE=osxbrew:lion
